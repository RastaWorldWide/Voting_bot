import os
import json
from datetime import datetime
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List
from fastapi.middleware.cors import CORSMiddleware
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types.web_app_info import WebAppInfo
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot)

VOTES_FILE = "votes.json"

app = FastAPI(title="Prosoft Voting API")

# === CORS ===
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –≤—Ä–µ–º–µ–Ω–Ω–æ
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ–ª–æ—Å–∞ ===
class Vote(BaseModel):
    fio: str
    department: str
    nominee: str
    chat_id: int  # –ø–µ—Ä–µ–¥–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# === FastAPI endpoint –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è ===
@app.post("/api/votes")
async def submit_vote(vote: Vote):
    try:
        vote_data = vote.dict()
        vote_data["date"] = datetime.now().isoformat()

        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–æ–ª–æ—Å–∞
        votes: List[dict] = []
        if os.path.exists(VOTES_FILE):
            with open(VOTES_FILE, "r", encoding="utf-8") as f:
                votes = json.load(f)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
        votes.append(vote_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(VOTES_FILE, "w", encoding="utf-8") as f:
            json.dump(votes, f, ensure_ascii=False, indent=2)

        # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram ===
        asyncio.create_task(bot.send_message(
            vote.chat_id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ, –≤–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω! –ü–æ–¥–≤–æ–¥–∏—Ç—å –∏—Ç–æ–≥–∏ –±—É–¥–µ–º 30 –Ω–æ—è–±—Ä—è üéâ"
        ))

        return {"status": "ok", "message": "–ì–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω"}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# === –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤ ===
@app.get("/api/votes")
async def get_votes():
    if os.path.exists(VOTES_FILE):
        with open(VOTES_FILE, "r", encoding="utf-8") as f:
            votes = json.load(f)
        return votes
    return []

# === –•–µ–Ω–¥–ª–µ—Ä –±–æ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ WebApp ===
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.KeyboardButton(
        "–û—Ç–∫—Ä—ã—Ç—å –≤–µ–± —Å—Ç—Ä–∞–Ω–∏—Ü—É",
        web_app=WebAppInfo(url="https://www.prosoft-people.ru")
    ))
    await message.answer("–ü—Ä–∏–≤–µ—Ç!", reply_markup=markup)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–º–µ—Å—Ç–µ —Å FastAPI ===
@app.on_event("startup")
async def start_bot():
    asyncio.create_task(dp.start_polling())

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
